#!/usr/bin/env python

from __future__ import print_function
import os
import re
import sys


def binary_to_c_array(data):
    ret = '    '
    i = 0
    for c in data:
        this_char = '0x{c:02X},{suffix}'.format(
            c=ord(c),
            suffix=' ' if i % 16 != 15 else '\n    ')
        ret = ret + this_char
        i = i + 1

    return ret.rstrip()


def bin2c(infile, outcfile, outhfile):
    infile_c = re.sub(r'\W', '_', os.path.basename(infile))
    include_guard = (
        "INC_" + re.sub(r'\W', '_', os.path.basename(outhfile)) + "_")

    f = open(infile, 'rb')
    infile_contents = f.read()
    f.close()

    hfile_contents = """// WARNING: This file is autogenerated from {binfile}!
#ifndef {include_guard}
#define {include_guard}

#include <stdint.h>
#include <stdlib.h>

extern const uint8_t {infile_c}[{length}];

#endif  // {include_guard}
""".format(
        binfile=infile,
        include_guard=include_guard,
        infile_c=infile_c,
        length=len(infile_contents))

    hex_array = binary_to_c_array(infile_contents)

    cfile_contents = """// WARNING: This file is autogenerated from {binfile}!
// TODO(rqou): This path might not always be right
#include "../{outhfile_base}"

const uint8_t {infile_c}[{length}] = {{
{hex_array}
}};
""".format(
        outhfile_base=os.path.basename(outhfile),
        infile_c=infile_c,
        hex_array=hex_array,
        binfile=infile,
        length=len(infile_contents))

    f = open(outcfile, 'w')
    f.write(cfile_contents)
    f.close()

    f = open(outhfile, 'w')
    f.write(hfile_contents)
    f.close()


def main():
    if len(sys.argv) < 4:
        print("{}: in.bin out.c out.h".format(sys.argv[0]))
        sys.exit(1)

    bin2c(sys.argv[1], sys.argv[2], sys.argv[3])


if __name__ == '__main__':
    main()
