#! /usr/bin/env python3
# encoding: utf-8

from pprint import pprint
from waflib.TaskGen import feature, after
import waflib.Task

from waf_extensions import declare_variants, clone_env


class Strip(waflib.Task.Task):

    run_str = '${strip} --strip-unneeded ${SRC}'
    color = 'BLUE'


@feature('strip')
@after('apply_link')
def strip(self):
    libs = [task.outputs[0] for task in self.tasks]
    self.create_task('Strip', libs)


def options(opt):
    pass


def build(bld):
    lib_features = ['c', 'cshlib']

    sources = [
        'ngl_alloc.c',
        'ngl_array_ngl_val.c',
        'ngl_bits.c',
        'ngl_buffer.c',
        'ngl_builtins.c',
        'ngl_call.c',
        'ngl_error.c',
        'ngl_func.c',
        'ngl_globals.c',
        'ngl_hash.c',
        'ngl_obj.c',
        'ngl_package.c',
        'ngl_refc.c',
        'ngl_stack_ngl_val.c',
        'ngl_str.c',
        'ngl_table_ngl_val.c',
        'ngl_thread.c',
        'ngl_type.c',
        'ngl_utf8.c',
        'ngl_vm.c',
    ]

    for src in bld.path.ant_glob('common_defs/*.yaml'):
        bld(
            rule='${root}/tools/typpo_c_generator.py ${SRC} ${TGT}',
            source=src,
            target=src.change_ext('.h')
        )

    for src in bld.path.ant_glob('common_defs/modules/*.yaml'):
        bld(
            rule='${ngl_root}/src/generate_module.py ${SRC} ${TGT}',
            source=src,
            target=src.change_ext('.c')
        )

    includes = '. common_defs ../.. ../../inc'

    if 'micro' in bld.variant:
        to_remove = []
        if bld.env['strip_micro'] == 'yes':
            lib_features.append('strip')
        for source in to_remove:
            sources.remove(source)

    bld.objects(
        source='ngl_vm_core.c',
        target='ngl_vm_core',
        cflags=bld.env['core_cflags'],
        includes=includes,
        )

    bld.objects(
        source=sources,
        target='objects',
        includes=includes,
        use='math',
    )

    if 'native' in bld.variant:
        bld(
            features=lib_features,
            use='objects ngl_vm_core',
            target='angelic',
        )

        bld.program(
            source='main.c',
            target='main',
            includes=includes,
            use='angelic',
            rpath='$ORIGIN',
        )

    bld(
        features=['c', 'cstlib'],
        use='objects ngl_vm_core',
        target='angelic',
    )
