#!/usr/bin/env python
from waf_extensions import declare_variants, run_all, sub_conf
import re
import os.path

declare_variants(['release_emscripten'],
                 subdir='lua')


def configure_emscripten(conf):
    conf.env['CC'] = 'emcc'
    conf.env['CC_NAME'] = 'emcc'
    conf.env['COMPILER_CC'] = 'emcc'
    conf.env['LINK_CC'] = 'emcc'
    conf.env.append_value('CFLAGS', '-Wno-warn-absolute-paths')
    conf.load('compiler_c')
    conf.env['cprogram_PATTERN'] = '%s.js'
    conf.env['AR'] = 'llvm-ar'
    conf.load('ar')


def configure(conf):
    with sub_conf(conf, 'lua/release_emscripten'):
        configure_emscripten(conf)
    # The default build for the controller is handled by the controller


def build(bld):
    # Build for the controller and lua itself.
    # Currently, lua is only built on its own using emscripten.
    if 'controller' not in bld.variant and 'lua' not in bld.variant:
        return

    # We want to glob all files in the src directory which don't contain main
    # functions.
    main_re = re.compile(r'^ *int +main *\(', re.MULTILINE)
    paths = bld.path.ant_glob("src/**/*.c")
    files = []

    # Filter out files which contain a main function
    for path in paths:
        with open(path.abspath()) as f:
            contents = f.read()
            if not main_re.search(contents):
                files.append(path)

    # Always build the objects.
    bld.objects(
        source=files,
        target="lua_objects",
        includes="src"
    )

    if 'emscripten' in bld.variant:
        # Using emscripten, build a .so, and from that build a .js.
        bld(
            features=['c', 'cshlib'],
            use='lua_objects',
            target='lua',
        )

        # Find the functions to export. All exported functions are marked with
        # LUA_API and their names are wrapped in parentheses (at least in Lua
        # version 5.x).
        func_decl = re.compile(r'^LUA_API [A-z0-9_ *]*\(([A-z0-9_]+)\) *\(',
                               flags=re.MULTILINE)
        with open(os.path.join(bld.env['root'], 'controller', 'lua', 'src',
                               'lua.h')) as f:
            contents = f.read()
            api_fns = func_decl.findall(contents)

        export_str = ','.join("'_{}'".format(fn) for fn in api_fns)

        fake_node_js = bld.path.parent.find_resource('vm/src/fake_node.js')
        bld(
            name='emcc library',
            rule=' '.join([
                'emcc ${SRC} -o ${TGT} ${CFLAGS}',
                '-s EXPORTED_FUNCTIONS="[' + export_str + ']"',
                '--llvm-lto 3',
                '-s RESERVED_FUNCTION_POINTERS=1024',
                '-s TOTAL_STACK=1600000',
                '--pre-js ' + fake_node_js.abspath(),
                ]),
            source='liblua.so',
            target='lua.js',
        )
        bld.add_manual_dependency('lua.js',
                                  fake_node_js)
