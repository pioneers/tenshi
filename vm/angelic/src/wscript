#! /usr/bin/env python3
# encoding: utf-8

# Licensed to Pioneers in Engineering under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Pioneers in Engineering licenses
# this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License

from pprint import pprint
from waflib.TaskGen import feature, after
import waflib.Task
import re
import os.path

from waf_extensions import declare_variants, clone_env


class Strip(waflib.Task.Task):

    run_str = '${strip} --strip-unneeded ${SRC}'
    color = 'BLUE'


@feature('strip')
@after('apply_link')
def strip(self):
    libs = [task.outputs[0] for task in self.tasks]
    self.create_task('Strip', libs)


def options(opt):
    pass


def build(bld):
    lib_features = ['c', 'cshlib']

    sources = [
        'ngl_alloc.c',
        'ngl_array_ngl_val.c',
        'ngl_bits.c',
        'ngl_buffer.c',
        'ngl_builtins.c',
        'ngl_call.c',
        'ngl_error.c',
        'ngl_func.c',
        'ngl_globals.c',
        'ngl_hash.c',
        'ngl_module.c',
        'ngl_obj.c',
        'ngl_package.c',
        'ngl_refc.c',
        'ngl_stack_ngl_val.c',
        'ngl_str.c',
        'ngl_table_ngl_val.c',
        'ngl_thread.c',
        'ngl_type.c',
        'ngl_utf8.c',
        'ngl_vm.c',
        'ngl_api.c',
    ]

    for src in bld.path.ant_glob('common_defs/*.yaml'):
        bld(
            name='typpo',
            rule='${root}/tools/typpo_c_generator.py ${SRC} ${TGT}',
            source=src,
            target=src.change_ext('.h')
        )

    for src in bld.path.ant_glob('common_defs/modules/*.yaml'):
        bld(
            name='module gen',
            rule='${ngl_root}/src/generate_module.py ${SRC} ${TGT}',
            source=src,
            target=src.change_ext('.c')
        )

    includes = '. common_defs ../../../controller ../../../controller/inc'

    if 'micro' in bld.variant:
        to_remove = []
        if bld.env['strip_micro'] == 'yes':
            lib_features.append('strip')
        for source in to_remove:
            sources.remove(source)

    bld.objects(
        source='ngl_vm_core.c',
        target='ngl_vm_core',
        cflags=bld.env['core_cflags'],
        includes=includes,
    )

    bld.objects(
        source=sources,
        target='objects',
        includes=includes,
        use='math',
    )

    if 'native' in bld.variant or 'emscripten' in bld.variant:
        bld(
            features=lib_features,
            use='objects ngl_vm_core',
            target='angelic',
        )

        bld.program(
            source='main.c',
            target='main',
            includes=includes,
            use='angelic',
            rpath='$ORIGIN',
        )

        # Matching all the arguments can be tricky, because it can span
        # multiple lines and contain comments.
        # So we don't look at anything past the first (.
        # Note that matching the beginning is important to avoid matching
        # macro definitions.
        ngl_api_re = re.compile(r'^[A-z0-9_* ]+ [*]?([A-z0-9_]+)\(',
                                flags=re.MULTILINE)
        ngl_api_fns = []
        with open(os.path.join(bld.env['ngl_root'], 'src', 'ngl_api.h')) as f:
            ngl_api_fns = ngl_api_re.findall(f.read())

        export_str = ','.join("'_{}'".format(fn) for fn in ngl_api_fns)

        if 'emscripten' in bld.variant:
            fake_node_js = bld.path.find_resource('fake_node.js')
            bld(
                name='emcc library',
                rule=' '.join([
                    'emcc ${SRC} -o ${TGT} ${CFLAGS}',
                    '-s EXPORTED_FUNCTIONS="[' + export_str + ']"',
                    '--llvm-lto 3',
                    '-s RESERVED_FUNCTION_POINTERS=1024',
                    '-s TOTAL_STACK=1600000',
                    '--pre-js ' + fake_node_js.abspath(),
                    ]),
                source='libangelic.so',
                target='ngl_vm.js',
            )
            bld.add_manual_dependency('ngl_vm.js',
                                      fake_node_js)

    bld(
        features=['c', 'cstlib'],
        use='objects ngl_vm_core',
        target='angelic_static'
    )
