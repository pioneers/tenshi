#!/usr/bin/env python
from waf_extensions import declare_variants, run_all, sub_conf
import re
import os.path

declare_variants(['release_emscripten', 'debug_native'],
                 subdir='lua')


def options(opt):
    opt.load('compiler_c')


def configure_emscripten(conf):
    conf.env['CC'] = 'emcc'
    conf.env['CC_NAME'] = 'emcc'
    conf.env['COMPILER_CC'] = 'emcc'
    conf.env['LINK_CC'] = 'emcc'
    conf.env.append_value('CFLAGS', '-Wno-warn-absolute-paths')
    conf.load('compiler_c')
    conf.env['cprogram_PATTERN'] = '%s.js'
    conf.env['AR'] = 'llvm-ar'
    conf.load('ar')


def configure_debug_native(conf):
    conf.load('compiler_c')
    conf.check_cc(lib='m', uselib_store='math', mandatory=True)
    conf.env.append_value('CFLAGS', '-std=gnu99')
    conf.load('ar')
    conf.env.append_value('CFLAGS', '-g')


def configure(conf):
    if not conf.env['root']:
        conf.env['root'] = os.path.join(conf.path.abspath(), os.pardir,
                                        os.pardir)
    with sub_conf(conf, 'lua/release_emscripten'):
        configure_emscripten(conf)
    with sub_conf(conf, 'lua/debug_native'):
        configure_debug_native(conf)
    # The default build for the controller is handled by the controller


def build(bld):
    if not bld.variant:
        print('Building all variants.')
        run_all('build')
        return
    # Build for the controller and lua itself.
    # Currently, lua is only built on its own using emscripten.
    if 'controller' not in bld.variant and 'lua' not in bld.variant:
        return

    # We want to glob all files in the src directory which don't contain main
    # functions.
    main_re = re.compile(r'^ *int +main *\(', re.MULTILINE)
    paths = bld.path.ant_glob("src/**/*.c")
    files = []

    # Filter out files which contain a main function
    for path in paths:
        with open(path.abspath()) as f:
            contents = f.read()
            if not main_re.search(contents):
                files.append(path)

    # Always build the objects.
    bld.objects(
        source=files,
        target="lua_objects",
        includes="src"
    )

    if 'native' in bld.variant:
        bld.program(
            target='lua',
            source='src/lua.c',
            use='lua_objects math'
        )

        bld.program(
            target='luac',
            source='src/luac.c',
            use='lua_objects math'
        )

    if 'emscripten' in bld.variant:
        # Using emscripten, build a .so, and from that build a .js.
        bld(
            features=['c', 'cshlib'],
            use='lua_objects',
            target='lua',
        )

        api_fns = []

        func_decl = re.compile(r'''
        # Begin at the start of the line
        ^
        # Do not capture the next group
        (?:
        # Require some words with possible * and ().
        [*()]*\w+[*()]*\s+
        # There must be at least one such word
        )+
        # Then allow * and (
        [*(]*
        # There may be some whitespace
        \s*
        # Capture the function name.
        (\w+)
        # There may be some whitespace
        \s*
        # Allow a )
        \)?
        # There may be some whitespace
        \s*
        # And then an argument list
        \(''', flags=re.MULTILINE | re.VERBOSE)

        for filename in ['lua.h', 'lauxlib.h', 'js.h', 'threading.h']:
            with open(os.path.join(bld.env['root'], 'vm', 'lua', 'src',
                                   filename)) as f:
                contents = f.read()
                api_fns.extend(func_decl.findall(contents))

        export_str = ','.join(
            "'_{}'".format(fn) for fn in api_fns)

        fake_node_js = bld.path.parent.find_resource(
            'angelic/src/fake_node.js')

        bld(
            name='emcc library',
            rule=' '.join([
                'emcc ${SRC} -o ${TGT} ${CFLAGS}',
                '-s EXPORTED_FUNCTIONS="[' + export_str + ']"',
                '--llvm-lto 3',
                '-s RESERVED_FUNCTION_POINTERS=1024',
                '-s TOTAL_STACK=1600000',
                '--pre-js ' + fake_node_js.abspath(),
                ]),
            source='liblua.so',
            target='lua.js',
        )
        bld.add_manual_dependency('lua.js',
                                  fake_node_js)
