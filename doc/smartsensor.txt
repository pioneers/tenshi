========================= Tenshi Smart Sensor Protocol =========================

Layer 1 - Physical layer
########################

The Tenshi Smart Sensor Protocol is arranged as a shared multi-drop bus. The
standard connector used for the bus is a 4 row x 2 column 0.1" x 0.1" pitch
IDC ribbon cable connector with a notch, and the standard cabling is 8 pin flat
0.05" pitch 28 AWG ribbon cable. The impedance of the cable should be
reasonably around 120 ohms, but the exact value is not critical (most ribbon
cable of these dimensions is suitable). The pinout of the connector is as
follows:

    Top view looking down at PCB:
     ___________
    |¯¯¯¯¯¯¯¯¯¯¯|
    | +5    GND |
    | A+    A-  ¯¯|
    | B-    B+  |¯¯
    | GND   +5  |
    |___________|
     ¯¯¯¯¯¯¯¯¯¯¯

The two +5 and GND lines are connected together. They are capable of supplying
an estimated maximum of 1.5A combined. Voltage output may vary by an estimated
+-10%. The A+/A- and B+/B- lines are RS-485 differential pairs with an output
swing of 5V under no load. The "A" differential pair is always an output from
the master controller to the smart sensors. The "B" differential pair is always
an input from the smart sensors to the main controller. The RS-485 lines do not
have the standard biasing resistors and therefore idle at 0V/0V. This requires
"failsafe" capable transceivers. 120 ohm terminators are present on the main
controller board. It is currently TBD whether bus terminators must be attached
to the far end of the cable.

Cables must originate at the main controller board and terminate at either a
smart sensor or a (TBD if required) bus terminator. The main controller board
should not be connected in the middle of a multidrop cable. Cables must have
all connectors crimped with the notch facing the same direction (left/right)
and the same side (top/bottom).

At this point, there is no support for crossover cables to allow smart sensors
to talk to each other independently of the main controller or for robots to
talk to each other. There is also currently no provision for active repeaters
or hubs.

The maximum number of devices on each bus is nominally 32, but a safe maximum
limit is 8. The RS-485 transceivers should theoretically support cable lengths
of at least 100', but a safe maximum limit is 40'.

The signalling above the RS-485 layer is asynchronous serial at 1 Mbaud
(1000000 bits per second) 8n1 LSB first. Therefore, each bit time is 1 us and
the total time for a byte is 10 us. RS-485 transceivers are enabled only when
bytes are actively being transmitted.

Layer 2 - Link Layer
####################

The Tenshi protocol link layer consists of a stream of packets or frames.
Frames are delimited with 0x00 bytes. All multi-byte values are transmitted
in little-endian byte order (LSB first). bit0 is used to refer to the LSB and
bit7/bit15/bit31/bit63 are used to refer to the MSB.

The Tenshi protocol bus has the following possible states:
* Inactive
* Maintainance
* Enumeration
* Active
Each of these states will be described in detail below.


Inactive state: The master controller is not connected, crashed, booting, or
otherwise not driving the bus. The bus idles at 0V/0V (logic level high).


Maintainance state: The master controller is performing some type of
maintainance operation using the bus. The protocol used in this state is
half-duplex and controlled by the main controller. The main controller can send
request frames to the bus and one particular device may optionally transmit a
response. Devices cannot transmit data to the master without the master
initiating the request for data. Responses will time out after TBD milliseconds.
Both TX (from controller) and RX (to controller) frames are encoded using
Consistent Overhead Byte Stuffing (COBS). The frame format is as follows:

    Maintainance state frame format:
    |---------------------------------------|
    | 0x00 | type | length | <COBS payload> |
    |---------------------------------------|

Every frame contains a leading 0x00 byte, a type byte (cannot be 0x00), a
length of the entire frame, and an optional COBS-encoded payload. type is
1 byte and must have its MSB set for maintainance frames. len is 1 byte and
may range from [3,255].

The following range of type bytes are allocated:
* [0xD0-0xDF] - high-level identification and configuration
* [0xE0-0xEF] - debug
* [0xF0-0xFD] - enumeration
* 0xFE - ping/pong
* 0xFF - reset all devices

Several examples of maintainance frames follow:

Type 0xDD, no payload:
0x00 0xDD 0x03

Type 0xDD, payload of length 1 containing "0xDD":
0x00 0xDD 0x05 0x01 0xDD

Type 0xDD, payload of length 2 containng "0x00 0xEE":
0x00 0xDD 0x06 0x01 0x02 0xEE

Maintainance frames do not contain link layer CRCs, but CRCs may (will likely)
be implemented by higher layers of the protocol.

The master may choose to send maintainance frames during any bus state. The
format of maintainance frames is designed to be recognizable in active mode.
Note that sending maintainance frames disrupts active mode and the bus is
considered to have transitioned to maintainance mode if any maintainance frames
are sent during active mode. The master must perform the appropriate actions
to reestablish active mode (if desired).

Upon reception of a 0xFF-type maintainance packet, slave devices should flush
their internal state and return to an unconfigured state ready to receive
commands. Slave devices must shut off their transceivers. In order to prevent
accidentally triggering bus resets, the payload of 0xFF-type packets must be
"0xE6 0xAD 0xBB 0xE3 0x82 0x93 0xE3 0x81 0xA0 0xE4 0xB8 0x96 0xE7 0x95 0x8C
0xE6 0x88 0xA6 0xE7 0xB7 0x9A."

Upon reception of a 0xFE-type maintainance packet, the addressed slave device
should reply with the same payload data. The structure of a ping request is
8 bytes of device unique ID followed by an arbitrary amount of data (can be 0).
Devices should respond with a 0xFE packet with the same data without the 8
bytes of unique ID.


Enumeration state: The master controller is trying to identify all the
connected devices. All devices on the bus must be assigned a unique 64-bit
serial number during manufacturing. The purpose of enumeration is to discover
the serial numbers of all attached smart sensor devices. Note that enumeration
must be explicitly requested. At this time, there is no ability to dynamically
detect new devices on the bus without trying to enumerate them.

Enumeration state uses maintainance frames to perform various enumeration
operations. The following type IDs are defined:
* 0xF0 - enter enumeration
* 0xF1 - exit enumeration, return to normal operation
* 0xF2 - enumeration select
* 0xF3 - reset enumeration
* 0xF4 - enumeration unselect

Enumeration state is entered when the master sends a maintainance frame of
type 0xF0. The payload must contain a COBS-encoded version of the magic bytes
"0xE6 0xAD 0xBB 0xE3 0x82 0x93 0xE3 0x81 0xA0 0xE4 0xB8 0x96 0xE7 0x95 0x8C
0xE6 0x88 0xA6 0xE7 0xB7 0x9A." The purpose of a magic string is to ensure that
enumeration mode is not accidentally entered because enumeration mode operates
the bus in a different manner.

Upon receiving the command to enter enumeration mode, a slave device must
turn on its transmitter and drive a logic level 0 onto the bus. The device
should only respond to enumeration select, enumeration exit, and bus reset type
packets until it leaves enumeration mode. The slave device should reset
internal protocol-related state. This command must have its payload set to
"0xE6 0xAD 0xBB 0xE3 0x82 0x93 0xE3 0x81 0xA0 0xE4 0xB8 0x96 0xE7 0x95 0x8C
0xE6 0x88 0xA6 0xE7 0xB7 0x9A."

Upon receiving the command to exit enumeration mode, a slave device must turn
off its transmitter and return to an idle state ready to receive commands. This
command does not have a payload.

Upon receiving the enumeration reset command, a slave device must do the same
as the enumeration enter command. This command does not have a payload.

Upon receiving the enumeration select command, a slave device must turn off its
transmitter iff its unique 64-bit ID bitwise-anded with the transmitted mask is
equal to the transmitted value. The structure of the payload is 8 bytes of
unique ID mask followd by 8 bytes of unique ID value. The slave device should
perform the test "<my ID> & <mask> == <value>" and disable its transmitter iff
this test is true. Note that once all slaves have their transmitters off,
the bus is no longer driven and returns to an idle logic high. This allows
binary searching through the address space.

Upon receiving the enumeration unselect command, a slave device must turn its
transmitter back on again iff the same condition used by enumeration select
holds.

Enumeration protocol:
The main controller may use the enumeration commands to discover slave devices
using any algorithm it chooses. The preferred algorithm is a radix tree/binary
search algorithm. This section requires expansion.


Active state: The master controller is actively receiving samples from slave
devices. In active state, time is divided into intervals of 1 ms that are
referred to as "samples." Each sample is divided into 16-byte segments referred
to as "subchunks." Because each byte requires 10 us to send, 100 bytes may be
sent in each sample. Therefore, each sample is divided into 6 subchunks of 16
bytes (96 bytes) and 4 bytes (40 us) of timing slop and/or reserved for future
expansion.

At the beginning of each subchunk, the master sends the following header:
    |---------------------------------------------------------------------------------------|
    | 0x00 | 0 has payload  sample#  subchunk# | <in-band signalling>  <length> | <payload> |
    |---------------------------------------------------------------------------------------|

Note that most of this header is not COBS-encoded. The second byte contains a
0 bit in bit7, a flag in bit6 that is set to 1 iff there is a payload present
after the subchunk header, the current sample number (mod 4) in bits 4-5
(0-indexed), and the current frame number in bits 0-3 (1-indexed). Note that
this can never result in a value of 0. Iff the "has payload" flag is set to 1,
bit0-6 of the length byte contains a single byte in the range [1,13] containing
the length of the in-band signalling payload. The payload (if present) is
COBS-encoded.

The optional payload attached to a subchunk can be either some type of
in-band signalling or commands to an actuator. The bit7 of the length must be
set if it is an in-band signalling command and must be clear if it is an
actuator command. The list of in-band signalling commands is TBD.

Each slave device is assigned a set of (sample#, subchunk#) blocks that it is
allowed to transmit in. These blocks are allocated using a TBD bandwidth
allocation algorithm. A slave device may transmit only after receiving the
second byte of the subchunk header of the beginning of its allocated block up
to but not including the second byte of the subchunk header of the end of its
allocated block. If a slave device has multiple contiguous blocks, it may
continue to transmit during the subchunk header of all the blocks it owns and
it only needs to send 1 slave reply header. If a slave device has multiple
noncontiguous blocks, it must stop transmitting after each block and must send
a new slave reply header each time.

The structure of the slave reply header is as follows:
    |---------------------------------------------------------------------------------|
    | 0x00 | 0 has payload  sample#  subchunk# | in-band signalling  length | payload |
    |---------------------------------------------------------------------------------|

The third byte contains an in-band signalling bit in bit7 and a length of the
entire reply packet in bits 0-6. If the in-band signalling bit is set, the
payload is interpreted as some in-band signalling command defined later.
Otherwise, the payload is interpreted as normal sample data. The payload is
COBS-encoded.

Slave configuration:
Slave (sample#, subchunk#) blocks are configured using the 0xD0 command.
The payload of the 0xD0 command contains 8 bytes of slave unique ID followed by
zero or more pairs of bytes containing first the sample number and then the
subchunk number. A sample number or subchunk number of 0xFF means "any."
The 0xD0 command is idempotent (not cumulative) so a slave must stop using its
previous allocation of subchunks upon receiving a new 0xD0 command.

Slave descriptor data can be retrieved using the 0xD1 command. The payload
consists of an 8-byte slave unique ID, a 16-bit start address, and a 8-bit
length. The slave reply payload consists of only the descriptor data. The
format of the descriptor data is TBD.

Layer 3 - Higher-level Protocol
#################################

Slave descriptor:
This section describes the structure of the data returned by the 0xD1 command.
The 0xD1 command is used to retrieve a block of data that describes the
function of the slave device and the format of its payloads. Strings in the
descriptor are null-terminated UTF-8 English. There is currently no support for
true i18n. The structure of the data is as follows:

            ----------------------------------------------------
            | length (2 bytes)                                 |
            ----------------------------------------------------
            | length of human-readable description (1 byte)    |
            ----------------------------------------------------
            | human-readable description (n bytes)             |
            ----------------------------------------------------
            | chunks requested per sample numerator (1 byte)   |
            ----------------------------------------------------
            | chunks requested per sample denominator (1 byte) |
            ----------------------------------------------------
            | number of channels (1 byte)                      |
            ----------------------------------------------------
            | channel descriptor (repeated n times)            |
            ----------------------------------------------------
            | crc8 (1 byte)                                    |
            ----------------------------------------------------

The CRC8 polynomial is x^8 + x^7 + x^6 + x^4 + x^2 + 1.

The structure of a channel descriptor is as follows:
            ----------------------------------------------------
            | length of descriptor (1 byte)                    |
            ----------------------------------------------------
            | length of human-readable description (1 byte)    |
            ----------------------------------------------------
            | human-readable description (n bytes)             |
            ----------------------------------------------------
            | type (1 byte)                                    |
            ----------------------------------------------------
            | additional information (n bytes)                 |
            ----------------------------------------------------

The following types of channels are currently defined:
    * 0x00 -- digital in/out
    * 0x01 -- analog input
    * 0x02 -- analog output
    * 0x03 -- hobby servo
    * 0x40 -- generic I2C
    * 0x41 -- generic SPI
    * 0x42 -- generic UART
    * 0x80 -- Grizzly Bear v3
    * 0x81 -- Battery Buzzer
    * 0x82 -- Team Flag
    * 0xFE -- Actuator Mode
    * 0xFF -- debugger

The structure of the additional information block varies according to the type.
The following structures are currently defined:

Type 0x00 -- digital in/out
            ----------------------------------------------------
            | flags (1 byte)                                   |
            ----------------------------------------------------
            | sample rate in samples/second (2 byte)           |
            ----------------------------------------------------

bit0 of flags -- can input
bit1 of flags -- input is active low
bit2 of flags -- can output push-pull
bit3 of flags -- can output open-drain
bit4 of flags -- output is active low

Type 0x01 -- analog input
            ----------------------------------------------------
            | sample rate in samples/second (2 byte)           |
            ----------------------------------------------------
            | bits per sample (1 byte)                         |
            ----------------------------------------------------
            | calibration/scaling type (1 byte)                |
            ----------------------------------------------------
            | calibration data (n bytes)                       |
            ----------------------------------------------------

Type 0x02 -- analog output
            ----------------------------------------------------
            | sample rate in samples/second (2 byte)           |
            ----------------------------------------------------
            | bits per sample (1 byte)                         |
            ----------------------------------------------------
            | calibration/scaling type (1 byte)                |
            ----------------------------------------------------
            | calibration data (n bytes)                       |
            ----------------------------------------------------

The calibration/scaling types/data are shared by analog inputs and outputs.
The following types are supported:
* 0x00 - no scaling
* 0x01 - linear/affine scaling
* 0x02 - exponential scaling
* 0x03 - logarithmic scaling
* 0x04 - LUT (Look Up Table) scaling

Scaling is currently expected to be performed by the master device, not the
smart sensor device. The data to/from the smart sensor device is always in
units of ADC/DAC LSBs. It is currently not possible to offload the scaling
computation.

The calibration data format is as follows:
    Type 0x00 -- no calibration data. Data sent to/from sensor is in LSBs.
    Type 0x01 -- calibration data contains two IEEE 754 floats, a and b. The
        following operation is performed on the input: y = a * x + b.
    Type 0x02 -- calibration data contains three IEEE 754 floats: a, b, and c.
        The following operation is performed on the input:
        y = a * e^{b * x} + c
    Type 0x03 -- calibration data contains three IEEE 754 floats: a, b, and c.
        The following operation is performed on the input:
        y = a * ln(b * x + c)
    Type 0x04 -- calibration data contains a 4 byte count of entries followed
        by <count> pairs of two IEEE 754 floats, x_i and y_i. The output y is
        found by linearly interpolating between the two y_i values nearest
        the input x value.

Type 0x03 -- hobby servo
            ----------------------------------------------------
            | bits per sample (1 byte)                         |
            ----------------------------------------------------
            | internal timer tick frequency (4 byte)           |
            ----------------------------------------------------
            | internal cycle time in ticks (4 byte)            |
            ----------------------------------------------------
            | calibration/scaling type (1 byte)                |
            ----------------------------------------------------
            | calibration data (n bytes)                       |
            ----------------------------------------------------

The calibration/scaling types/data are supported:
* 0x00 - no scaling
* 0x01 - no scaling, custom minimum pulse width
* 0x02 - [0-n] scaling, custom minimum/maximum pulse width

Data is always sent to the actuator in units of timer ticks.

The calibration data format is as follows:
    Type 0x00 -- no calibration data. Data sent to the actuator is in timer
        ticks. Data specifies the amount of time high.
    Type 0x01 -- calibration data contains one 4-byte integer, l. The operation
        performed on the input is y = x + l
    Type 0x02 -- calibration data contains two 4-byte integers, l and h, and 1
        2-byte integer n. The following operation is performed on the input
        (assuming true division): y = x / n * (h - l) + l

Type 0x40 -- generic I2C
            TODO

Type 0x41 -- generic SPI
            TODO

Type 0x42 -- generic UART
            TODO

Type 0x80 -- Grizzly Bear v3
            ----------------------------------------------------
            | mode (1 byte)                                    |
            ----------------------------------------------------
            | speed (4 byte)                                   |
            ----------------------------------------------------

For mode explanation, see Grizzly Documentation packet at:
https://pioneers.berkeley.edu/staff/wiki/File:Grizzly_doc.pdf

Type 0x81 -- Battery Buzzer
            For now, Battery Buzzer additional information block is identical
            to analog in.

Type 0x82 -- Team Flag
            For now, Team Flag additional information block is identical
            to digital.

Type 0xFE -- Actuator Mode
            ----------------------------------------------------
            | mode (1 byte)                                    |
            ----------------------------------------------------

Controls the mode of actuators and active sensors.  All other channels on the
sensor must obey the mode.  It is recommended for devices to have this channel
and as the first one.

Possible modes are:
* 0x00 - Disabled: No power to actuators and possibly some active sensors.
* 0x01 - Paused/Stunned: Most actuators are still powered such that they
             maintain their last position.  Some actuators like a motor
             controller in velocity mode should stop.
* 0x02 - Active: Actuators respond to values normally.  If a value was set
             during an inactive mode, this value should be used upon mode
             change.

Devices can still be read and configured in inactive modes.

Type 0xFF -- debugger
            No calibration data is present

Payload formats:
The structure of payloads to send to/from each smart sensor device is derived
by parsing its descriptors. The exact number of bytes that will be allocated
depends on each channel type. Bytes in payloads are allocated to each channel
sequentially (so that channel 0 in the descriptor appears first in the payload).
If the channel descriptors end up defining more data than is requested in the
chunks per sample field, the behavior is undefined.

Type 0x00 -- digital in/out
    First, the number of samples per subchunk is calculated given the samples
    per second, frames per second (1000), and subchunks per frame (6). The
    number of samples is rounded up to the nearest multiple of 8. Let this
    number be x. If the "can input" flag is set, x/8 bytes are allocated in the
    RX payload. If one "can output" flag is set, x/8 bytes are allocated in the
    TX payload. If both "can output" flags are set, x/4 bytes are allocated in
    the TX payload.

    If the "can input" flag is set or only one "can output" flag is set, the
    format of the bytes in the payload is that 1 bit is used per sample. bit0
    contains earlier samples than bit7, and the the earlier bytes contain
    earlier samples. If both "can output" flags are set, the format of the bytes
    in the TX payload changes. Each sample now consists of two bits. The lowest
    bit continues to be the sample value, but the higher bit now contains
    0 if the output should be driven push-pull and 1 if the output should be
    driven open-drain.

Type 0x01 -- analog input and Type 0x02 - analog output
    First, the number of samples per subchunk is calculated given the samples
    per second, frames per second (1000), and subchunks per frame (6). The
    number of samples is rounded up to the nearest integer. Let this number
    be x. The number of bits per sample is then rounded up to the nearest
    multiple of 8. Let this number be y. x * y / 8 bytes are allocated in the
    payload.

    Each ADC sample occupies y / 8 bytes in the payload. Bits are used starting
    from the LSB up to the number of bits. Unused bits are ignored. Earlier
    samples appear first in the payload.

Type 0x03 -- hobby servo
    Because hobby servos are refreshed relatively infrequently, only one sample
    per subchunk is currently supported. This one sample is a 4-byte counter
    value encoding the pulse width of the servo in arbitrary units. It is
    expected that usually servos will use type 0x02 scaling so that the
    student program can control the servo in a meaningful way.

Type 0x40 -- generic I2C
            TODO

Type 0x41 -- generic SPI
            TODO

Type 0x42 -- generic UART
            TODO

Type 0x80 -- Grizzly Bear v3
            TODO

Type 0xFF -- debugger
    The TX payload contains a length followed by <len> bytes to output to the
    PC. The RX payload contains a length followed by <len> bytes that were
    received from the PC since the previous sample.

Debug commands:
The 0xE0-type maintainance packet is used for "low level panic" outputting.
The structure of the payload is simply a (COBS-encoded) string to output to the
debug host computer. This packet will be used instead of normal active-mode
packets to a type-0xFF channel only when the master controller has crashed.
At this time, it is not possible to send any data back to the master controller
using debug commands - this 0xE0 packet is output-only.
